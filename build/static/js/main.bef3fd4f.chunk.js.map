{"version":3,"sources":["App.js","Game/Game.js","Home/Home.js","Callback/Callback.js","history.js","Auth/auth0-variables.js","routes.js","Auth/Auth.js","serviceWorker.js","index.js","Events.js"],"names":["App","route","this","props","history","replace","concat","auth","login","logout","isAuthenticated","react_default","a","createElement","className","onClick","bind","id","goTo","Component","Game","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initSocket","socket","on","GAME_UPDATE","game","setState","CURRENTPLAYS","currentUsers","names","setUser","user","state","emit","USER_CONNECTED","console","log","name","deal","blackCards","decks","whiteCards","gameInProgress","numOfPlayers","length","playersObj","blackMax","blackSelect","Math","floor","random","currentText","text","currentPick","pick","i","j","_ref","playerCardsArray","slice","splice","push","picture","cardsInHand","score","bcardPick","bCard","dealer","turn","players","playcard","index","winner","numPicks","newCards","playerChecker","cardsinplay","playerIndex","cardOwner","hasPlayedCard","pCheckIdx","updateScore","player","k","playerScore","map","x","playerName","smoke","cards","handleSubmit","assertThisInitialized","handleChange","event","preventDefault","e","userInput","target","value","_this2","mySocketID","pickACard","pickedCard","key","nonDealerPicks","scoreKeeper","currentCards","card","white","heading","src","alt","inGamePlayers","Home","socketUser","axios","get","headers","Authorization","localStorage","access_token","then","response","profile","data","checkstate","LOGOUT","allPlayers","io","connect","addUserName","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","sent","abrupt","stop","apply","arguments","plays","removeUserArr","_this3","Game_Game_Game","Callback","createHistory","AUTH_CONFIG","domain","clientId","callbackUrl","Auth","auth0","WebAuth","clientID","redirectUri","responseType","scope","handleAuthentication","getProfile","authorize","parseHash","err","authResult","accessToken","idToken","setSession","alert","error","cb","client","userInfo","userProfile","expiresAt","JSON","stringify","expiresIn","Date","getTime","setItem","removeItem","parse","getItem","Boolean","window","location","hostname","match","routes","Router","Route","path","render","src_App_0","assign","src_Home_Home","Redirect","to","test","hash","src_Callback_Callback","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","COMMUNITY_CHAT","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","PRIVATE_MESSAGE","NEW_CHAT_USER"],"mappings":"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","file":"static/js/main.bef3fd4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\r\n\r\n  goTo(route) {\r\n    this.props.history.replace(`/${route}`)\r\n  }\r\n\r\n  login() {\r\n    this.props.auth.login();\r\n  }\r\n\r\n  logout() {\r\n    this.props.auth.logout();\r\n  }\r\n\r\n  render() {\r\n    const { isAuthenticated } = this.props.auth;\r\n\r\n    return (\r\n      \r\n      <div>\r\n\r\n          {\r\n              !isAuthenticated() && (\r\n                \r\n                <div className=\"hero\">\r\n                <h1>Cards Against Humaity</h1>\r\n                <div className=\"flip-card\">\r\n                  <div className=\"flip-card-inner\">\r\n                    <div className=\"flip-card-front\">\r\n                      <h1>Let the Fun Begin</h1>\r\n                  <button className=\"flip-card-button\" onClick={this.login.bind(this)} id=\"qsLoginBtn\">Log in | Sign Up</button>\r\n                    </div>\r\n                    <div className=\"flip-card-back\">\r\n                      <h1>Cards</h1> \r\n                      <h1>Against</h1> \r\n                      <h1>Humanity</h1>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                  </div>\r\n                  \r\n                )\r\n            }\r\n            {\r\n              isAuthenticated() && (\r\n              <div>\r\n              <div className=\"navbar\" id=\"homeid\">\r\n              <div className=\"linkBox\">\r\n              <div className=\"link\" onClick={this.goTo.bind(this, 'home')}>Cards Against Humanity</div>\r\n\r\n                <div className=\"link\" onClick={this.logout.bind(this)}>Log Out</div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport decks from '../data/decks';\r\nimport {USER_CONNECTED, GAME_UPDATE, CURRENTPLAYS} from '../Events';\r\nimport './Game.css'\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state ={\r\n      blackCards: \"\",\r\n      whiteCards: \"\",\r\n      cards: [],\r\n      players: [],\r\n      names:[\"john\", \"dave\", \"sven\"],\r\n      dealer: \"\",\r\n      cardsinplay: [],\r\n      score: [],\r\n      gameInProgress: false\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n\r\n \r\n  \r\n\r\n  componentWillMount() {\r\n    if (this.state.cards.length === 0){\r\n    this.setState({\r\n      cards: decks\r\n    })\r\n  }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { socket } = this.props\r\n    this.initSocket(socket)\r\n\r\n  }\r\n\r\n  // makes initial connection to socket for component\r\n\r\n  initSocket = (socket) => {\r\n    socket.on('connect', () => {\r\n    })\r\n    \r\n    socket.on(GAME_UPDATE, (game) => {\r\n        this.setState(game)\r\n    })\r\n    \r\n    socket.on(CURRENTPLAYS, (currentUsers) => {\r\n      this.setState({\r\n        names: currentUsers\r\n      })\r\n    })\r\n}\r\n\r\n  handleSubmit(event) {\r\n\r\n  event.preventDefault()\r\n}\r\n\r\nsetUser = (user) => {\r\n  const {socket} = this.state\r\n  socket.emit(USER_CONNECTED, user);\r\n  this.setState({user})\r\n  console.log(user.name)\r\n}\r\n\r\nhandleChange(e) {\r\n  this.setState({\r\n    userInput: e.target.value\r\n  });\r\n  e.preventDefault()\r\n}\r\n\r\n// Initially deal out cards according to names in state\r\ndeal = () => {\r\n  \r\n  this.setState({\r\n    blackCards: decks[0].blackCards,\r\n    whiteCards: decks[0].whiteCards,\r\n    gameInProgress: true\r\n  }, () => {\r\n    \r\n    var numOfPlayers = this.state.names.length\r\n\r\n    let playersObj = []\r\n   \r\n    const blackMax = this.state.blackCards.length-1;\r\n   let blackSelect = Math.floor(Math.random() * blackMax);\r\n   let currentText = this.state.blackCards[blackSelect].text;\r\n   let currentPick = this.state.blackCards[blackSelect].pick;\r\n   let a = this.state.whiteCards \r\n   \r\n   // shuffle function for stack of cards \r\n   for (let i = a.length - 1; i > 0; i--) {\r\n     const j = Math.floor(Math.random() * (i + 1));\r\n     [a[i], a[j]] = [a[j], a[i]];\r\n   }\r\n   \r\n    for (let i = 0; i<numOfPlayers; i++) {\r\n   \r\n       let playerCardsArray = a.slice(0,7)\r\n       a.splice(0,7)\r\n   \r\n       this.setState({\r\n         whiteCards: a\r\n       })\r\n         \r\n       playersObj.push({\r\n         name: this.state.names[i].id,\r\n         id:this.state.names[i].name,\r\n         picture: this.state.names[i].picture,\r\n         cardsInHand: playerCardsArray,\r\n         score: 0,\r\n         bcardPick: currentPick,\r\n         bCard: currentText,\r\n         dealer: false,\r\n         turn: 1\r\n       })\r\n     }\r\n     playersObj[0].dealer = true\r\n   \r\n     this.setState({\r\n       players: playersObj\r\n     }, () => {\r\n      const { socket } = this.props\r\n      let game = this.state\r\n      socket.emit(GAME_UPDATE, game)\r\n     })\r\n   })\r\n}\r\n\r\n// play available cards in the amount derived from numPicks\r\n\r\nplaycard = (i, index, winner, numPicks) => {\r\n  let newCards = this.state.players\r\n\r\n  let playerChecker= this.state.cardsinplay\r\n  \r\n\r\n  if (numPicks > 0){  \r\n\r\n    // no cards yet played\r\n    if (playerChecker.length === 0) {\r\n      this.state.cardsinplay.push({ name: [this.state.players[index].cardsInHand[i]], \r\n        playerIndex: index,\r\n        cardOwner: winner})\r\n        newCards[index].bcardPick--\r\n    }\r\n    else {\r\n\r\n      let hasPlayedCard \r\n      let pCheckIdx\r\n    for(let j=0; j< playerChecker.length; j++){\r\n      // playing second card for user\r\n      if (playerChecker[j].playerIndex === index) {\r\n        hasPlayedCard = true\r\n        pCheckIdx = j\r\n        j = playerChecker.length + 1\r\n      } \r\n      else {\r\n        hasPlayedCard = false\r\n      }\r\n    }\r\n      // playing first card when cards are already in play\r\n      if (hasPlayedCard) {\r\n        if (newCards[index].bcardPick > 0) {\r\n          playerChecker[pCheckIdx].name.push(this.state.players[index].cardsInHand[i])\r\n          newCards[index].bcardPick--\r\n          \r\n        } \r\n        else {\r\n        }\r\n        \r\n      } else {\r\n        this.state.cardsinplay.push({ name: [this.state.players[index].cardsInHand[i]], \r\n          playerIndex: index,\r\n          cardOwner: winner})\r\n          newCards[index].bcardPick--\r\n        }  \r\n  }\r\n    \r\n\r\n  \r\n    newCards[index].cardsInHand.splice(i,1)\r\n\r\n    this.setState({\r\n      players: newCards\r\n    }, () => {\r\n      const { socket } = this.props\r\n      let game = this.state\r\n      socket.emit(GAME_UPDATE, game)\r\n    })\r\n}\r\n};\r\n\r\n// Create object to update scores with forloop then setstate with created variable playerScore and pushes new cards into hand\r\n\r\nupdateScore = (player) => {\r\n\r\n  let newCards = this.state.players\r\n\r\n  const blackMax = this.state.blackCards.length-1;\r\n  let blackSelect = Math.floor(Math.random() * blackMax);\r\n  let currentText = this.state.blackCards[blackSelect].text;\r\n  let currentPick = this.state.blackCards[blackSelect].pick;\r\n  \r\n  // resets dealer\r\n\r\nfor(let j=0; j<newCards.length; j++){\r\n  if(newCards[j].turn === newCards.length) {\r\n    newCards[j].turn= 1\r\n    newCards[j].dealer = false\r\n    newCards[0].dealer= true\r\n  } else{\r\n    if ( newCards[j].turn < newCards.length && newCards[j].turn === j) {\r\n      newCards[j].turn++\r\n      newCards[j].dealer = true\r\n    } else {\r\n      newCards[j].turn++\r\n      newCards[j].dealer = false\r\n    }\r\n    }\r\n    }\r\n  \r\n// resets picks for players so they are allowed to pick cards on next turn\r\n  \r\n  for(let k=0; k<newCards.length; k++) {\r\n    \r\n    newCards[k].bcardPick = currentPick\r\n    newCards[k].bCard = currentText\r\n  }\r\n\r\n// adds point to players score and deploys modal to reset the game and scores when a players score reaches 7(winning score)\r\n\r\nlet playerScore = this.state.players.map(i => i)\r\n\r\nfor(let i=0; i < playerScore.length; i++) {\r\n  if (playerScore[i].name === player) {\r\n    playerScore[i].score++\r\n    if(playerScore[i].score ===7) {\r\n      console.log(playerScore[i].name + \"wonnnnnn\")\r\n    }\r\n  }\r\n\r\n  // redeals number of cards necessary after all cards are played \r\n\r\n  let x\r\n  for (x in newCards) {\r\n    if (newCards[x].cardsInHand.length < 7) {\r\n      newCards[x].cardsInHand.push(this.state.whiteCards.splice(0,7 - newCards[x].cardsInHand.length))\r\n    }\r\n  }\r\n\r\n  this.setState({\r\n    players: newCards,\r\n    cardsinplay: []\r\n  })\r\n   \r\n\r\n}\r\n\r\n// need to increment the dealer by 1 here\r\n\r\nthis.setState({\r\n  players: playerScore\r\n}, () => {\r\n  const { socket } = this.props\r\n  console.log(this.state.players)\r\n  let game = this.state\r\n  socket.emit(GAME_UPDATE, game)\r\n})\r\n}\r\n\r\ncardsinplay = (playerName) => {\r\n  let smoke = this.state.cardsinplay\r\n\r\n  for (let i =0; i <this.state.smoke.length; i++) {\r\n    if (smoke[i].name === playerName) {\r\n\r\n    }\r\n  }\r\n}\r\n\r\n  render() { \r\n    const { socket } = this.props\r\n    let mySocketID = socket.id\r\n    \r\n\r\n    // Show current cards in play to dealer to pick\r\n    let pickACard = \r\n  <div>\r\n    <h1>Cards In Play</h1>\r\n    <h3>(You Are the Dealer)</h3>\r\n    {  \r\n  this.state.cardsinplay.map((pickedCard, index) => \r\n    <div>\r\n      <div className=\"cardOutline\" key={index}>\r\n        <div className=\"cardInner\">\r\n          <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n            <div className=\"cardFrame-front\">\r\n              <div className=\"cardName\">\r\n                  {pickedCard.name}\r\n              </div>\r\n                <button className=\"winnerButton\" onClick={() => this.updateScore(pickedCard.cardOwner)}>\r\n                    Pick a Winner \r\n                </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n    }\r\n    </div>\r\n\r\n    // show current cards in play to non-dealer so they can see other cards in play\r\n\r\n  let nonDealerPicks = \r\n  <div>\r\n  <h1>Cards In Play</h1>\r\n  {  \r\n  this.state.cardsinplay.map((pickedCard, index) => \r\n  <div>\r\n    <div className=\"cardOutline\" key={index}>\r\n      <div className=\"cardInner\">\r\n        <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n          <div className=\"cardFrame-front\">\r\n            <div className=\"cardName\">\r\n                {pickedCard.name}\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n  }\r\n  </div>\r\n\r\n  // displays scores of all players\r\n  const scoreKeeper = this.state.players.map(i => \r\n    <div key={i.name}>{i.id}: {i.score}</div>\r\n    )\r\n\r\n  // display/logic of all players displays and layouts\r\n    const currentCards = \r\n    \r\n    this.state.players.map((i, index) =>   \r\n    i.name === mySocketID ? \r\n    <div key={index}>\r\n            <div className=\"cardFrame\">\r\n            <div className=\"score\">\r\n            {scoreKeeper}\r\n            </div>\r\n\r\n<div className=\"whiteCardBox\"> \r\n            { i.dealer === true ?\r\n          <div>\r\n            <div className=\"dealerPicks\">{pickACard}</div> \r\n            {\r\n            i.cardsInHand.map((card, white) => \r\n            <div>            \r\n                  <div key={white + 1} className=\"cardOutline\">\r\n                          <div className=\"cardInner\">\r\n                              <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n                                    <div className=\"cardFrame-front\">\r\n                                        <div className=\"cardName\">\r\n                                          { card }\r\n                                        </div>\r\n                              </div>\r\n                          </div>\r\n                  </div>\r\n            </div>\r\n            )\r\n            }\r\n\r\n<div className=\"cardOutline\" key={index}>\r\n      <div className=\"blackCardInner\">\r\n        <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n          <div className=\"cardFrame-front\">\r\n            <div className=\"cardName\">\r\n                <div>{i.bCard}</div>\r\n                <div>Pick: {i.bcardPick}</div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n  </div>\r\n          </div>\r\n            : \r\n            <div>\r\n            <div className=\"dealerPicks\">{nonDealerPicks}</div> \r\n            {\r\n            i.cardsInHand.map((card, white) =>\r\n              <div key={white + 1} className=\"cardOutline\">\r\n                <div className=\"cardInner\">\r\n                    <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n                          <div className=\"cardFrame-front\">\r\n                              <div className=\"cardName\">\r\n                                { card }\r\n                              </div>\r\n                                <button id= { white + \": \" + index } \r\n                                className=\"pickButton\"  \r\n                                onClick={() => this.playcard(white, index, i.name, i.bcardPick)}>\r\n                                Play Card\r\n                                </button>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n           \r\n            )\r\n            }\r\n<div className=\"cardOutline\" key={index}>\r\n      <div className=\"blackCardInner\">\r\n        <div className=\"cardFrame-back\">Cards Against Humanity</div>\r\n          <div className=\"cardFrame-front\">\r\n            <div className=\"cardName\">\r\n                <div>{i.bCard}</div>\r\n                <div>Pick: {i.bcardPick}</div>\r\n            </div>\r\n        </div>\r\n      </div>\r\n  </div>\r\n            </div>\r\n            }\r\n</div>\r\n            </div>\r\n          </div>\r\n          : <div key={index}></div>\r\n          );\r\n\r\n\r\n// displays currently signed in player in top right along with avatar picture\r\n  const heading = this.state.names.map((i, index) => \r\n  i.id === mySocketID ?\r\n  <div key={index}>\r\n  <div className=\"playerName\">{i.name}</div>\r\n  <img className=\"playerPic\" src={i.picture} alt={i.id + `'s avatar`}></img>\r\n  </div>\r\n  : null\r\n  \r\n  )\r\n\r\n  // displays all players currently signed into game \r\n    const inGamePlayers = this.state.names.map((i,index) => \r\n     <div key={index + 22}>{i.name}</div> )\r\n  \r\n    \r\n    return (\r\n      <div className=\"gameContainer\">\r\n        { this.state.gameInProgress ? null :\r\n          <div className=\"game-flip-card\">\r\n            <div className=\"game-flip-card-inner\">\r\n              <div className=\"game-flip-card-front\">\r\n\r\n                <div className=\"heroGame\">\r\n                  <h1>Players In Game</h1>\r\n                  <div>{inGamePlayers}</div>\r\n                </div>\r\n            \r\n    {this.state.names.length < 3 ? \r\n      <div>\r\n        <h1>You need {3 - this.state.names.length} more players to begin</h1>\r\n      </div>                                   \r\n  :\r\n    <div>\r\n      <div>\r\n        <h1>Would you like to start?</h1> \r\n          <button onClick={this.deal} className=\"pickButton\">Deal cards</button>\r\n      </div>\r\n    </div>\r\n  }\r\n  \r\n        </div>\r\n        <div className=\"game-flip-card-back\">\r\n          <h1>Cards</h1> \r\n          <h1>Against</h1> \r\n          <h1>Humanity</h1>\r\n        </div>\r\n      </div>\r\n    </div>\r\n        }\r\n\r\n  <div>{heading}</div>\r\n  <div>{currentCards}</div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport io from 'socket.io-client';\r\nimport {USER_CONNECTED, LOGOUT, CURRENTPLAYS} from '../Events';\r\n// import Sidebar from './Sidebar'\r\nimport './Home.css';\r\nimport Game from '../Game/Game';\r\nimport axios from 'axios'\r\n\r\n\r\n const socketUrl = \"http://localhost:3001\"\r\n\r\nclass Home extends Component {\r\n  \r\n    constructor(props) {\r\n      super(props);\r\n    \r\n      this.state = {\r\n                socket: null, \r\n                user: null,\r\n                allPlayers: null,\r\n                profile: \"weed\"\r\n      };\r\n      }\r\n  \r\n\r\n      componentWillMount() {\r\n        \r\n        const socket = io.connect(\"/\")\r\n        \r\n        console.log(socket);\r\n\r\n        const addUserName = async () => { const res = await axios.get('https://wild-rice-5480.auth0.com/userinfo', { headers: {\"Authorization\" : `Bearer ${localStorage.access_token}`}})\r\n        return await res.data;\r\n}\r\n    \r\n    \r\n    socket.on(\"connect\", () => {\r\n      addUserName().then(name => {\r\n        let plays = {\r\n          name:name.name,\r\n          id: socket.id,\r\n          picture: name.picture\r\n        }\r\n          this.setState({\r\n            profile: name\r\n          })           \r\n\r\nsocket.emit(CURRENTPLAYS, plays)\r\n      })\r\n      \r\n    })\r\n\r\n    socket.on(\"disconnect\", () => {\r\n     let removeUserArr = this.state.allPlayers\r\n      for(let i=0; i < removeUserArr.length; i++) {\r\n        if (removeUserArr[i].id === socket.id) {\r\n          removeUserArr.splice(i,1)\r\n        }\r\n      }\r\n      this.setState({\r\n        allPlayers: removeUserArr\r\n      })\r\n      \r\n    })\r\n\r\n    socket.on(\"connect_error\", (e) => {\r\n      console.log(\"connect_error\", e)\r\n    })\r\n    \r\n        this.setState({'socket': socket\r\n      })\r\n      }\r\n\r\n      componentDidMount() {\r\n        const {socket} = this.state  \r\n        this.setState({\r\n         user: socket.id\r\n       })\r\n\r\n\r\n       socket.on(CURRENTPLAYS, (currentUsers) => {\r\n        this.setState({\r\n          allPlayers: currentUsers\r\n        })\r\n      })\r\n      }\r\n\r\n\r\n      \r\n      socketUser = () => {\r\n        axios.get('https://wild-rice-5480.auth0.com/userinfo', { headers: {\"Authorization\" : `Bearer ${localStorage.access_token}`}})\r\n    .then(response => this.setState({profile: response.data.name}))\r\n    }\r\n  \r\n      setUser = (user) => {\r\n          const {socket} = this.state\r\n          socket.emit(USER_CONNECTED, user);\r\n          this.setState({user})\r\n\r\n  \r\n      }\r\n\r\n      checkstate = () => {\r\n        console.log(this.state)\r\n      }\r\n  \r\n      logout = ()=> {\r\n          const {socket} = this.state\r\n          socket.emit(LOGOUT)\r\n          this.setState({user:null})\r\n      }\r\n  \r\n      render() {\r\n      const { socket } = this.state\r\n      let { allPlayers } = this.state\r\n      return (\r\n        <div className=\"homeContainer\">\r\n              {this.state.user === null ? <div>sign in</div> : \r\n                  <Game socket={socket} currentUsers={allPlayers}/> \r\n              }\r\n              \r\n                  </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass Callback extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div>I am loading ...</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Callback;","import createHistory from 'history/createBrowserHistory'\r\n\r\nexport default createHistory()","export const AUTH_CONFIG = {\r\n  domain: 'wild-rice-5480.auth0.com',\r\n  clientId: 'VSnsm6g1T2YGC9YKNwyBeL_pkC0ThXFa',\r\n  callbackUrl: 'https://wild-rice-5480.auth0.com/callback'\r\n}","import React from 'react';\r\nimport { Redirect, Route, Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport Home from './Home/Home';\r\nimport Callback from './Callback/Callback';\r\nimport Auth from './Auth/Auth';\r\nimport history from './history';\r\n\r\nconst auth = new Auth();\r\n\r\nconst handleAuthentication = ({location}) => {\r\n  if (/access_token|id_token|error/.test(location.hash)) {\r\n    auth.handleAuthentication();\r\n  }\r\n}\r\n\r\nexport const makeMainRoutes = () => {\r\n  return (\r\n      <Router history={history}>\r\n        <div>\r\n          <Route path=\"/\" render={(props) => <App auth={auth} {...props} />} />\r\n          <Route path=\"/home\" render={(props) => (\r\n            !auth.isAuthenticated() ? (<Redirect to=\"/\"/>) : (\r\n            <Home auth={auth} {...props} />\r\n            ))} />\r\n          <Route path=\"/callback\" render={(props) => {\r\n            handleAuthentication(props);\r\n            return <Callback {...props} /> \r\n          }}/>\r\n        </div>\r\n      </Router>\r\n  );\r\n}","import history from '../history';\r\nimport auth0 from 'auth0-js';\r\nimport { AUTH_CONFIG } from './auth0-variables';\r\n\r\n\r\nexport default class Auth {\r\n  auth0 = new auth0.WebAuth({\r\n    domain: AUTH_CONFIG.domain,\r\n    clientID: AUTH_CONFIG.clientId,\r\n    redirectUri: AUTH_CONFIG.callbackUrl,\r\n    responseType: 'token id_token',\r\n    scope: 'openid profile email'\r\n  });\r\n\r\n  userProfile;\r\n\r\n  constructor() {\r\n    this.login = this.login.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.getProfile = this.getProfile.bind(this);\r\n  }\r\n\r\n\r\n  login() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n        history.replace('/home');\r\n      } else if (err) {\r\n        history.replace('/home');\r\n        console.log(err);\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  getProfile(cb) {\r\n    console.log(this.auth0.client)\r\n    this.auth0.client.userInfo(this.accessToken, (err, profile) => {\r\n      if (profile) {\r\n        this.userProfile = profile;\r\n      }\r\n      cb(err, profile);\r\n    });\r\n  }\r\n\r\n  setSession(authResult) {\r\n    // Set the time that the access token will expire at\r\n    let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n    localStorage.setItem('access_token', authResult.accessToken);\r\n    localStorage.setItem('id_token', authResult.idToken);\r\n    localStorage.setItem('expires_at', expiresAt);\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  logout() {\r\n    // Clear access token and ID token from local storage\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('id_token');\r\n    localStorage.removeItem('expires_at');\r\n    this.userProfile = null;\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the \r\n    // access token's expiry time\r\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { makeMainRoutes } from './routes';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst routes = makeMainRoutes();\r\n\r\nReactDOM.render(\r\n  routes,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = {\r\n    COMMUNITY_CHAT:\"COMMUNITY_CHAT\",\r\n    USER_CONNECTED:\"USER_CONNECTED\",\r\n    MESSAGE_RECIEVED:\"MESSAGE_RECIEVED\",\r\n    MESSAGE_SENT:\"MESSAGE_SENT\",\r\n    USER_DISCONNECTED:\"USER_DISCONNECTED\",\r\n    TYPING:\"TYPING\",\r\n    VERIFY_USER:\"VERIFY_USER\",\r\n    LOGOUT:\"LOGOUT\",\r\n    PRIVATE_MESSAGE: \"PRIVATE_MESSAGE\",\r\n    NEW_CHAT_USER: \"NEW_CHAT_USER\",\r\n    GAME_UPDATE: \"GAME_UPDATE\",\r\n    CURRENTPLAYS: \"CURRENTPLAYS\"\r\n}"],"sourceRoot":""}