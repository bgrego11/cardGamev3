{"version":3,"sources":["App.js","Home/Sidebar.js","Home/Home.js","Example/Example.js","Callback/Callback.js","history.js","Auth/auth0-variables.js","routes.js","Auth/Auth.js","serviceWorker.js","index.js"],"names":["App","route","this","props","history","replace","concat","auth","login","logout","isAuthenticated","react_default","a","createElement","className","Button","id","bsStyle","onClick","bind","goTo","Component","Sidebar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleNav","state","navOpen","setState","nav","button","href","Home","src_Home_Sidebar","Example","Callback","createHistory","AUTH_CONFIG","domain","clientId","callbackUrl","Auth","auth0","WebAuth","clientID","redirectUri","responseType","scope","handleAuthentication","authorize","parseHash","err","authResult","accessToken","idToken","setSession","console","log","alert","error","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","removeItem","parse","getItem","Boolean","window","location","hostname","match","routes","Router","Route","path","render","src_App_0","assign","src_Home_Home","Redirect","to","src_Example_Example","_ref","test","hash","src_Callback_Callback","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e487e2d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  goTo(route) {\r\n    this.props.history.replace(`/${route}`)\r\n  }\r\n\r\n  login() {\r\n    this.props.auth.login();\r\n  }\r\n\r\n  logout() {\r\n    this.props.auth.logout();\r\n  }\r\n\r\n  render() {\r\n    const { isAuthenticated } = this.props.auth;\r\n\r\n    return (\r\n      \r\n      <div>\r\n\r\n          {\r\n              !isAuthenticated() && (\r\n                <div className=\"hero\">\r\n                <h1>Cards Against Humaity</h1>\r\n                  <Button\r\n                    id=\"qsLoginBtn\"\r\n                    bsStyle=\"primary\"\r\n                    className=\"btn-margin\"\r\n                    onClick={this.login.bind(this)}\r\n                  >\r\n                    Log In\r\n                  </Button>\r\n                  </div>\r\n                  \r\n                )\r\n            }\r\n            {\r\n              isAuthenticated() && (\r\n              //   <Navbar fluid>\r\n              //   <Navbar.Header>\r\n              //     <Navbar.Brand>\r\n              //       <a href=\"/\">Cards Against Humanity</a>\r\n              //     </Navbar.Brand>\r\n              //     </Navbar.Header>\r\n              //     <Button\r\n              //       bsStyle=\"primary\"\r\n              //       className=\"btn-margin\"\r\n              //       onClick={this.goTo.bind(this, 'home')}\r\n              //     >\r\n              //       Home\r\n              //     </Button>\r\n              //     <Button\r\n              //       id=\"qsLogoutBtn\"\r\n              //       bsStyle=\"primary\"\r\n              //       className=\"btn-margin\"\r\n              //       onClick={this.logout.bind(this)}\r\n              //     >\r\n              //       Log Out\r\n              //     </Button>\r\n              // </Navbar>\r\n              <div>\r\n              <div className=\"navbar\" id=\"homeid\">\r\n              <div className=\"linkBox\">\r\n              <div className=\"link\" onClick={this.goTo.bind(this, 'home')}>Cards Against Humanity</div>\r\n\r\n                <div className=\"link\" onClick={this.logout.bind(this)}>Log Out</div>\r\n\r\n\r\n</div>\r\n\r\n          </div>\r\n        </div>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport './Sidebar.css';\r\n\r\nclass Sidebar extends Component {\r\n          constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n              navOpen: true,\r\n              nav: \"sideNav\",\r\n              button: \"openBtn\"\r\n            }\r\n}\r\n\r\ntoggleNav = () => {\r\n  if (!this.state.navOpen) {\r\n    this.setState({\r\n      navOpen: true,\r\n      nav: \"sideNav\",\r\n      button: \"openBtn\"\r\n    });\r\n  } else {\r\n    this.setState({\r\n      navOpen: false,\r\n      nav: \"closeNav\",\r\n      button: \"closeBtn\"\r\n    })\r\n  }\r\n    }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sideBar\">\r\n     <div className={this.state.nav}>\r\n     <div href=\"javascript:void(0)\" className={this.state.button} onClick={this.toggleNav}>&times;</div>\r\n  <a href=\"#\">About</a>\r\n  <a href=\"#\">Services</a>\r\n  <a href=\"#\">Clients</a>\r\n  <a href=\"#\">Contact</a>\r\n     \r\n     </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;","import React, { Component } from 'react';\r\nimport Sidebar from './Sidebar'\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"homeCont\">\r\n      <Sidebar />\r\n     <div className=\"chatHome\">This is the chat box</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\n\r\nclass Example extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example;","import React, { Component } from 'react';\r\n\r\nclass Callback extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <div>I am loading ...</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Callback;","import createHistory from 'history/createBrowserHistory'\r\n\r\nexport default createHistory()","export const AUTH_CONFIG = {\r\n    domain: 'snyder.auth0.com',\r\n    clientId: 'L3sfw2E6qTRsHqkN4MQ3jgghPYaU9M9O',\r\n    callbackUrl: 'http://localhost:3000/callback'\r\n  }","import React from 'react';\r\nimport { Redirect, Route, Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport Home from './Home/Home';\r\nimport Example from './Example/Example';\r\nimport Callback from './Callback/Callback';\r\nimport Auth from './Auth/Auth';\r\nimport history from './history';\r\n\r\nconst auth = new Auth();\r\n\r\nconst handleAuthentication = ({location}) => {\r\n  if (/access_token|id_token|error/.test(location.hash)) {\r\n    auth.handleAuthentication();\r\n  }\r\n}\r\n\r\nexport const makeMainRoutes = () => {\r\n  return (\r\n      <Router history={history}>\r\n        <div>\r\n          <Route path=\"/\" render={(props) => <App auth={auth} {...props} />} />\r\n          <Route path=\"/home\" render={(props) => (\r\n            !auth.isAuthenticated() ? (<Redirect to=\"/\"/>) : (\r\n            <Home auth={auth} {...props} />\r\n            ))} />\r\n          <Route path=\"/example\" render={(props) => (\r\n            !auth.isAuthenticated() ? (<Redirect to=\"/\"/>) : (\r\n            <Example auth={auth} {...props} />\r\n            ))} />\r\n          <Route path=\"/callback\" render={(props) => {\r\n            handleAuthentication(props);\r\n            return <Callback {...props} /> \r\n          }}/>\r\n        </div>\r\n      </Router>\r\n  );\r\n}","import history from '../history';\r\nimport auth0 from 'auth0-js';\r\nimport { AUTH_CONFIG } from './auth0-variables';\r\n\r\nexport default class Auth {\r\n  auth0 = new auth0.WebAuth({\r\n    domain: AUTH_CONFIG.domain,\r\n    clientID: AUTH_CONFIG.clientId,\r\n    redirectUri: AUTH_CONFIG.callbackUrl,\r\n    responseType: 'token id_token',\r\n    scope: 'openid'\r\n  });\r\n\r\n  constructor() {\r\n    this.login = this.login.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n  }\r\n\r\n\r\n  login() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n        history.replace('/home');\r\n      } else if (err) {\r\n        history.replace('/home');\r\n        console.log(err);\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  setSession(authResult) {\r\n    // Set the time that the access token will expire at\r\n    let expiresAt = JSON.stringify((authResult.expiresIn * 1000) + new Date().getTime());\r\n    localStorage.setItem('access_token', authResult.accessToken);\r\n    localStorage.setItem('id_token', authResult.idToken);\r\n    localStorage.setItem('expires_at', expiresAt);\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  logout() {\r\n    // Clear access token and ID token from local storage\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('id_token');\r\n    localStorage.removeItem('expires_at');\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the \r\n    // access token's expiry time\r\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { makeMainRoutes } from './routes';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst routes = makeMainRoutes();\r\n\r\nReactDOM.render(\r\n  routes,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}